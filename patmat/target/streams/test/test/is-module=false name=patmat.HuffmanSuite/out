[0m[[0minfo[0m] [0m[32mHuffmanSuite:[0m[0m
[0m[[0minfo[0m] [0m[32m- weight of a larger tree[0m[0m
[0m[[0minfo[0m] [0m[32m- chars of a larger tree[0m[0m
[0m[[0minfo[0m] [0m[32m- makeCodeTree from two leafs[0m[0m
[0m[[0minfo[0m] [0m[32m- string2Chars from a string to a list[0m[0m
[0m[[0minfo[0m] [0m[32m- times: single character[0m[0m
[0m[[0minfo[0m] [0m[32m- times: twice the same character[0m[0m
[0m[[0minfo[0m] [0m[32m- times: different characters[0m[0m
[0m[[0minfo[0m] [0m[32m- times: empty list[0m[0m
[0m[[0minfo[0m] [0m[32m- times: nil[0m[0m
[0m[[0minfo[0m] [0m[32m- string2chars("hello, world")[0m[0m
[0m[[0minfo[0m] [0m[32m- makeOrderedLeafList for some frequency table[0m[0m
[0m[[0minfo[0m] [0m[32m- singleton tree is a singleton[0m[0m
[0m[[0minfo[0m] [0m[32m- non-singleton tree is not a singleton[0m[0m
[0m[[0minfo[0m] [0m[32m- insert: append to tail[0m[0m
[0m[[0minfo[0m] [0m[32m- insert: prepend to head[0m[0m
[0m[[0minfo[0m] [0m[32m- insert: insert in the middle[0m[0m
[0m[[0minfo[0m] [0m[32m- combine of some leaf list[0m[0m
[0m[[0minfo[0m] [0m[32m- decode and encode a very short text should be identity[0m[0m
[0m[[0minfo[0m] [0m[32m- quickEncode: encode then decode gives identity[0m[0m
